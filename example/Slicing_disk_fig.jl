using PhantomRevealer
using LaTeXStrings
"""
Generate the image from the dump files generated by `Slicing_disk.jl`
    by Wei-Shan Su,
    July 16, 2024
"""

### TEST Vorticity
function compute_vorticity(vx::Array, 
                           vy::Array, 
                           x::Vector{Float64}, 
                           y::Vector{Float64})::Matrix{Union{Float64, Missing}}
    # 確認輸入矩陣的大小一致
    @assert size(vx) == size(vy) "vx and vy must have the same dimensions"
    nx, ny = size(vx)
    
    # 初始化渦量矩陣，與輸入大小相同
    vorticity = Matrix{Union{Float64, Missing}}(undef, nx, ny)
    
    # 計算 x 和 y 軸的間距
    dx = diff(x)
    dy = diff(y)
    
    # 計算渦量
    for i in 1:nx
        for j in 1:ny
            if isnan(vx[i, j]) || isnan(vy[i, j])
                # 如果 vx 或 vy 包含 NaN，渦量設為 NaN
                vorticity[i, j] = NaN
            else
                # 計算 ∂vy/∂x
                if i < nx
                    dvydx = (vy[i + 1, j] - vy[i, j]) / dx[i]
                else
                    dvydx = (vy[i, j] - vy[i - 1, j]) / dx[i - 1]  # 使用後向微分
                end
                
                # 計算 ∂vx/∂y
                if j < ny
                    dvxdy = (vx[i, j + 1] - vx[i, j]) / dy[j]
                else
                    dvxdy = (vx[i, j] - vx[i, j - 1]) / dy[j - 1]  # 使用後向微分
                end
                
                # 渦量計算公式
                vorticity[i, j] = dvydx - dvxdy
            end
        end
    end
    return vorticity
end



function Constructing_figure(filepath::String)
    @info "-------------------------------------------------------"
    # ------------------------------PARAMETER SETTING------------------------------
    # Figure setting
    Figure_format :: String = "eps"
    figsize :: Tuple = (8,8)
    dpi = 450
    slabel = latexstring(L"$r$ [au]")
    zlabel = latexstring(L"$z$ [au]")
    colormap_rho :: String = "RdYlGn"
    colormap_vs :: String = "RdBu"
    colormap_vorticity :: String = "RdBu"
    clim_rho :: Vector = [5.1e-18,1e-14]
    clim_vs :: Vector = [-3.5e+4,3.5e+4]
    clim_vorticity :: Vector = [-5.5,5.5]
    Slice_ϕ :: Union{Nothing,Float64} = 0                                             # The azimuthal angle of vertical structure (in degree). Taking azimuthally averaging if `nothing`.
    # -----------------------------------------------------------------------------
    # Packaging parameters
    filename = splitext(filepath)[1]
    File_prefix = split(filename, "_")[1]
    number_data = extract_number(filename)

    # Verifing data
    Result :: Analysis_result = Read_HDF5(filepath)
    if Result.params["Analysis_type"] != "Slicing_disk"
        error("InputError: The Analysis type of data needs to be `Slicing_disk`!")
    end

    prplt = initialize_pyplot_backend()

    # Modified Colormap to have white color at the bottom
    colormap_rho_modified = prplt.colormap_with_base(colormap_rho)

    # Packaging parameters
    colormaps = [colormap_rho_modified,colormap_vs,colormap_vorticity]
    clims = [clim_rho, clim_vs, clim_vorticity]

    transfer_cgs!(Result)

    # Finding column_index
    target_columns :: Vector{String} = ["rho_g","rho_d","vs_g","vs_d","vz_g","vz_d","∇×vϕ_g","∇×vϕ_d"]
    target_column_index :: Vector{Int64} = zeros(Int64, length(target_columns))
    for key in keys(Result.column_names)
        value = strip(Result.column_names[key])  
        actual_name = strip(split(value)[end], ['[', ']'])  
        for (i, target) in enumerate(target_columns)
            if actual_name == target 
                target_column_index[i] = key
            end
        end
    end

    # Setup plotting target
    timestamp = Result.time
    s = Result.axes[1]
    ϕ = Result.axes[2]
    z = Result.axes[3]
    rho_label = L"$\rho$ [g\ cm$^{-3}$]"
    vs_label = L"$v_s$ [cm\ s$^{-1}$]"
    Vorticity_label = L"Vorticity [$10^{-10}$ s$^{-1}$]"
    clabels :: Vector = [rho_label,vs_label, Vorticity_label]

    # Determining the azimuthal angle
    if !(isnothing(Slice_ϕ))
        Slice_ϕ_index = value2closestvalueindex(ϕ,Slice_ϕ*(π/180))
        Slice_ϕ_real = ϕ[Slice_ϕ_index]*(180/π)
        anatonate_label = latexstring(L"$t = ",Int64(round(timestamp)), L"$ yr, $\phi$ = ", Int64(round(Slice_ϕ_real)),L"^{\circ}")
    else
        anatonate_label = latexstring(L"$t = ",Int64(round(timestamp)), L"$ yr")
    end
    
    reduced_array = Vector{Array{Float64}}(undef, length(target_columns))
    for (i,index) in enumerate(target_column_index)
        if isnothing(Slice_ϕ)
            reduced_array[i] = grid_reduction(Result.data_dict[index],2)'
        else
            reduced_array[i] = Result.data_dict[index][:,Slice_ϕ_index,:]'
        end
    end

    rhog, rhod, vsg, vsd, vzg, vzd, curlvϕg, curlvϕd = reduced_array
    threadshold = 1.15*clims[1][1]
    vsg[rhog .< threadshold] .= NaN
    vsd[rhod .< threadshold] .= NaN
    curlvϕg[rhog .< threadshold] .= NaN
    curlvϕd[rhod .< threadshold] .= NaN

    #### Test Cal Vorticity
    vzg[rhog .< threadshold] .= NaN
    vzd[rhod .< threadshold] .= NaN
    s_cgs = s.*Result.params["udist"]
    z_cgs = z.*Result.params["udist"]
    curlvϕg = -compute_vorticity(vsg,vzg,s_cgs,z_cgs)
    curlvϕd = -compute_vorticity(vsd,vzd,s_cgs,z_cgs)

    # Preparing plotting backend
    fax = prplt.cart_plot(s, z, slabel, zlabel)
    fax.__class__.anato_text_position = [0.02,0.97]
    fax.setup_fig(3,2,figsize)

    fax.pcolor_draw([rhog,rhod,vsg,vsd,-curlvϕg*1e10,-curlvϕd*1e10], colormaps, clabels,[1,1,0],[latexstring(anatonate_label," (Gas)"),latexstring(anatonate_label," (Dust)")], clims, false)
    fax.set_ylabel(0)
    fax.set_ylabel(2)
    fax.set_ylabel(4)
    fax.set_xlabel(4)
    fax.set_xlabel(5)
    if isnothing(Slice_ϕ)
        output_filename = "$(File_prefix)_$(number_data)_aziaveg.$(Figure_format)"
    else
        output_filename = "$(File_prefix)_$(number_data)_$(Slice_ϕ)deg_griddiff.$(Figure_format)"
    end
    fax.save_fig(output_filename,dpi)
    fax.close_fig()
end

function main()
    # Commendline variable setting
    if length(ARGS) < 1
        println("Usage: julia Slicing_disk_fig.jl <filename>")
        exit(1)
    end

    files = ARGS             

    First_logging()

    for file in files
        @info "File: $file"
        @time_and_print begin
            Constructing_figure(file)
        end 
    end

    @info "\nEnd analysis!"
end

main()